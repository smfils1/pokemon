{"version":3,"sources":["utils/pokemon.js","Pages/index.js","Pages/Pokemon.js","App.js","index.js"],"names":["getPokemon","id","setData","setError","a","fetch","res","json","name","weight","stats","types","pokemonPager","offset","limit","setPages","count","results","Math","ceil","Pokemons","useState","page","setPage","maxPage","setMaxPage","pokemons","setPokemons","useEffect","JSON","stringify","Pagination","showFirstButton","showLastButton","onChange","event","value","Pokemon","match","params","pokemon","setPokemon","error","App","exact","path","render","props","to","ReactDOM","document","getElementById"],"mappings":"sPAAMA,EAAU,uCAAG,WAAOC,EAAIC,EAASC,GAApB,yBAAAC,EAAA,+EAEGC,MAAM,qCAAD,OAAsCJ,IAF9C,cAETK,EAFS,gBAG4BA,EAAIC,OAHhC,gBAGTC,EAHS,EAGTA,KAAMC,EAHG,EAGHA,OAAQC,EAHL,EAGKA,MAAOC,EAHZ,EAGYA,MAE3BT,EAAQ,CAAEM,OAAMC,SAAQC,QAAOC,UAC/BR,GAAS,GANM,kDAQfA,GAAS,GARM,0DAAH,0DAYVS,EAAY,uCAAG,WAAOC,EAAQC,EAAOZ,EAASa,GAA/B,qBAAAX,EAAA,+EAECC,MAAM,6CAAD,OACwBQ,EADxB,kBACwCC,IAH9C,cAEXR,EAFW,gBAKcA,EAAIC,OALlB,gBAKXS,EALW,EAKXA,MAAOC,EALI,EAKJA,QAEbF,EAASG,KAAKC,KAAKH,EAAQF,IAC3BZ,EAAQe,GARS,4GAAH,4D,OC0BHG,EAlCE,WACf,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAUA,OAJAC,qBAAU,WACRhB,EAAa,IAAMU,EAAO,GAAI,GAAIK,EAAaF,KAC9C,CAACH,IAGF,gCACE,2CACCE,EAAU,EACT,qCACE,8BAAMK,KAAKC,UAAUJ,EAAU,KAAM,KACrC,cAACK,EAAA,EAAD,CACEf,MAAOQ,EACPQ,iBAAe,EACfC,gBAAc,EACdX,KAAMA,EACNY,SAnBS,SAACC,EAAOC,GACzBb,EAAQa,SAsBJ,4DCTOC,EApBC,SAAC,GAAe,IACtBpC,EADqB,EAAZqC,MACIC,OAAbtC,GACR,EAA4BoB,mBAAS,MAArC,mBAAKmB,EAAL,KAAcC,EAAd,KACA,EAAwBpB,oBAAS,GAAjC,mBAAKqB,EAAL,KAAYvC,EAAZ,KAMA,OAJAyB,qBAAU,WACR5B,EAAWC,EAAIwC,EAAYtC,KAC1B,CAACF,IAGF,8BACIyC,EAGA,wCAFA,8BAAMb,KAAKC,UAAUU,EAAS,KAAM,QCD7BG,MAVf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAcA,OACvD,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAiBA,OAC7D,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAAC,IAAD,CAAUE,GAAG,a,QCHxCC,IAASH,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.a0f98b6e.chunk.js","sourcesContent":["const getPokemon = async (id, setData, setError) => {\n  try {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);\n    let { name, weight, stats, types } = await res.json();\n\n    setData({ name, weight, stats, types });\n    setError(false);\n  } catch (e) {\n    setError(true);\n  }\n};\n\nconst pokemonPager = async (offset, limit, setData, setPages) => {\n  try {\n    const res = await fetch(\n      `https://pokeapi.co/api/v2/pokemon/?offset=${offset}&limit=${limit}`\n    );\n    let { count, results } = await res.json();\n\n    setPages(Math.ceil(count / limit));\n    setData(results);\n    //setError(false);\n  } catch (e) {\n    // setError(true);\n  }\n};\n\nexport { getPokemon, pokemonPager };\n","import React, { useState, useEffect } from \"react\";\nimport Pagination from \"@mui/material/Pagination\";\nimport { pokemonPager } from \"../utils/pokemon\";\n\nconst Pokemons = () => {\n  const [page, setPage] = useState(1);\n  const [maxPage, setMaxPage] = useState(0);\n  const [pokemons, setPokemons] = useState(null);\n\n  const changePage = (event, value) => {\n    setPage(value);\n  };\n\n  useEffect(() => {\n    pokemonPager(25 * (page - 1), 25, setPokemons, setMaxPage);\n  }, [page]);\n\n  return (\n    <div>\n      <div>Pokemons</div>\n      {maxPage > 0 ? (\n        <>\n          <pre>{JSON.stringify(pokemons, null, 2)}</pre>\n          <Pagination\n            count={maxPage}\n            showFirstButton\n            showLastButton\n            page={page}\n            onChange={changePage}\n          />\n        </>\n      ) : (\n        <div>There are no Pokemons</div>\n      )}\n    </div>\n  );\n};\n\nexport default Pokemons;\n","import React, { useState, useEffect } from \"react\";\nimport { getPokemon } from \"../utils/pokemon\";\n\nconst Pokemon = ({ match }) => {\n  const { id } = match.params;\n  let [pokemon, setPokemon] = useState(null);\n  let [error, setError] = useState(false);\n\n  useEffect(() => {\n    getPokemon(id, setPokemon, setError);\n  }, [id]);\n\n  return (\n    <div>\n      {!error ? (\n        <pre>{JSON.stringify(pokemon, null, 2)}</pre>\n      ) : (\n        <div>Error</div>\n      )}\n    </div>\n  );\n};\n\nexport default Pokemon;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport HomePage from \"./Pages\";\nimport PokemonPage from \"./Pages/Pokemon\";\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" render={(props) => <HomePage {...props} />} />\n      <Route exact path=\"/:id\" render={(props) => <PokemonPage {...props} />} />\n      <Route render={() => <Redirect to=\"/\" />} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}